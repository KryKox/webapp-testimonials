// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  companies Company[]
  employees Employee[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // optional
  access_token      String? // optional
  expires_at        Int? // optional
  token_type        String? // optional
  scope             String? // optional
  id_token          String? // optional
  session_state     String? // optional
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id             String @id @default(cuid())
  companyName    String
  companyAddress String

  companyEmployees Employee[]

  companyUserOwner User   @relation(fields: [companyOwnerId], references: [id], onDelete: Cascade)
  companyOwnerId   String
}

model Employee {
  id    Int       @id @default(autoincrement())
  grade GradeType @default(JUNIOR)

  employee   User   @relation(fields: [employeeid], references: [id], onDelete: Cascade)
  employeeid String

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum GradeType {
  INTERN // Stagiaire
  JUNIOR // Employé Junior
  MID_LEVEL // Employé de niveau intermédiaire
  SENIOR // Employé Senior
  TEAM_LEAD // Responsable d'équipe
  MANAGER // Manager
  DIRECTOR // Directeur
  EXECUTIVE // Cadre supérieur
}
